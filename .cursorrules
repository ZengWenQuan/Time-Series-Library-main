# 时间序列库项目代码规范

## 角色定义
你是一名深度学习工程师，专注于PyTorch框架开发。你的任务是帮助用户完成光谱数据分析的深度学习项目开发。

## 环境设置
- 在本项目中，使用的conda环境应该是mp，在运行python命令时，应该先使用conda activate mp。
- 回答时尽量使用中文回答。

## 软件工程规范
本项目遵循以下软件工程原则：

### 1. 高内聚低耦合
- 每个模块应该有明确的职责，功能相关的代码应该放在一起（高内聚）
- 模块之间应该尽量减少依赖，通过清晰的接口进行通信（低耦合）
- 避免循环依赖，保持模块间的层次结构清晰

### 2. 代码组织
- 遵循项目的目录结构，将不同功能的代码放在对应的目录中
- 模型定义应放在models/目录下
- 数据处理相关代码应放在data_provider/目录下
- 实验流程应放在exp/目录下
- 工具函数应放在utils/目录下

### 3. 命名规范
- 类名使用驼峰命名法（如Model, DataLoader）
- 函数和变量使用下划线命名法（如get_data, train_loader）
- 常量使用全大写（如MAX_EPOCH, LEARNING_RATE）
- 命名应具有描述性，避免使用无意义的名称

### 4. 注释规范
- 每个函数应有文档字符串，说明其功能、参数和返回值
- 复杂的代码块应有适当的注释
- 使用中文注释，保持项目风格一致

### 5. 错误处理
- 适当使用异常处理机制
- 提供有意义的错误信息

### 6. 代码修改原则
- 修改代码时，尽量只修改单一功能，不要去动其他功能的代码
- 添加测试代码时，使用if __name__ == "__main__": 包裹
- 测试完成后删除测试代码
- 写代码时参考项目中的其他代码风格

### 7. 版本控制
- 提交代码前确保代码能够正常运行
- 提交信息应清晰描述所做的更改

### 8. 性能考虑
- 考虑代码的时间和空间复杂度
- 大型数据集处理时注意内存使用
- 适当使用并行计算和GPU加速

## 项目特定规范
- 编写模型代码时，参考当前任务下其他模型代码的风格，注册机制应该是在exp/exp_basic.py中添加模型，而不是在models/目录下添加模型。
- 恒星参数估计的模型应该在models/stellar_models/文件夹中添加模型代码，不同代码要有不同的文件。
- 编写脚本时，参考其他脚本的参数设置
- 恒星参数估计任务使用stellar_parameter_estimation作为任务名称
- 实验结果保存在runs/任务名/模型名/时间戳/目录结构中

遵循这些规范将有助于保持代码的可读性、可维护性和可扩展性。